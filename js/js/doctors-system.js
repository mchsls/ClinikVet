// Doctor panel functionality
class DoctorSystem {
    constructor() {
        console.log('üë®‚Äç‚öïÔ∏è Initializing DoctorSystem...');
        this.initialized = false;
        this.initializeDoctorSystem();
    }

    initializeDoctorSystem() {
        if (this.initialized) return;
        
        this.setupEventListeners();
        this.initialized = true;
        
        // Check if doctor is already logged in
        const savedUser = localStorage.getItem('vetCurrentUser');
        if (savedUser) {
            try {
                const user = JSON.parse(savedUser);
                if (user.role === 'doctor') {
                    console.log('üë®‚Äç‚öïÔ∏è Doctor user found on init');
                    setTimeout(() => {
                        this.showDoctorPanel();
                    }, 100);
                }
            } catch (error) {
                console.error('Error parsing user:', error);
            }
        }
    }

    setupEventListeners() {
        // Event listeners will be setup when panel is shown
    }

    showDoctorPanel() {
        console.log('üë®‚Äç‚öïÔ∏è Showing doctor panel...');
        
        const panel = document.getElementById('doctorPanel');
        const doctorLink = document.querySelector('.doctor-link');
        
        if (panel) {
            panel.style.display = 'block';
            console.log('‚úÖ Doctor panel displayed');
            
            // Load doctor's appointments and medical history
            this.loadDoctorContent();
        } else {
            console.error('‚ùå Doctor panel element not found!');
        }
        
        if (doctorLink) {
            doctorLink.style.display = 'block';
        }
        
        // Scroll to doctor panel
        setTimeout(() => {
            if (panel) {
                panel.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
        }, 300);
    }

    hideDoctorPanel() {
        console.log('üë®‚Äç‚öïÔ∏è Hiding doctor panel...');
        
        const panel = document.getElementById('doctorPanel');
        const doctorLink = document.querySelector('.doctor-link');
        
        if (panel) {
            panel.style.display = 'none';
        }
        
        if (doctorLink) {
            doctorLink.style.display = 'none';
        }
    }

    loadDoctorContent() {
        const currentUser = window.authSystem?.currentUser;
        if (!currentUser || currentUser.role !== 'doctor') return;

        const doctorContent = document.getElementById('doctorContent');
        if (!doctorContent) return;

        // Update doctor info
        this.updateDoctorInfo();

        // Load appointments and medical history
        this.loadDoctorAppointments();
        this.loadMedicalHistory();
    }

    updateDoctorInfo() {
        const doctorName = document.getElementById('doctorName');
        const doctorSpecialization = document.getElementById('doctorSpecialization');
        
        if (doctorName) {
            doctorName.textContent = window.authSystem.currentUser.name;
        }
        if (doctorSpecialization) {
            doctorSpecialization.textContent = window.authSystem.currentUser.specialization;
        }
    }

    loadDoctorAppointments() {
        const currentUser = window.authSystem?.currentUser;
        if (!currentUser || currentUser.role !== 'doctor') return;

        const appointmentsList = document.getElementById('doctorAppointmentsList');
        if (!appointmentsList) return;

        const doctorId = currentUser.doctorId;
        const allAppointments = window.appointmentsSystem?.getAppointments() || [];
        
        // Filter appointments for this doctor with status 'confirmed' or 'pending'
        const doctorAppointments = allAppointments.filter(apt => 
            apt.doctorId === doctorId && (apt.status === 'confirmed' || apt.status === 'pending')
        ).sort((a, b) => new Date(a.date + ' ' + a.time) - new Date(b.date + ' ' + b.time));

        if (doctorAppointments.length === 0) {
            appointmentsList.innerHTML = '<div class="no-appointments"><p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤</p></div>';
            return;
        }

        appointmentsList.innerHTML = `
            <div class="appointments-current">
                ${doctorAppointments.map(appointment => this.renderAppointmentCard(appointment)).join('')}
            </div>
        `;

        // Add event listeners to complete buttons
        appointmentsList.querySelectorAll('.complete-appointment-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                this.openCompletionModal(btn.dataset.id);
            });
        });
    }

    loadMedicalHistory() {
        const currentUser = window.authSystem?.currentUser;
        if (!currentUser || currentUser.role !== 'doctor') return;

        const medicalHistoryList = document.getElementById('medicalHistoryList');
        if (!medicalHistoryList) return;

        const doctorId = currentUser.doctorId;
        const medicalHistory = this.getMedicalHistory(doctorId);

        if (medicalHistory.length === 0) {
            medicalHistoryList.innerHTML = '<div class="no-history"><p>–ò—Å—Ç–æ—Ä–∏—è –±–æ–ª–µ–∑–Ω–µ–π –ø—É—Å—Ç–∞</p></div>';
            return;
        }

        medicalHistoryList.innerHTML = `
            <div class="medical-history-grid">
                ${medicalHistory.map(record => this.renderMedicalRecord(record)).join('')}
            </div>
        `;
    }

    renderAppointmentCard(appointment) {
        const servicePrice = this.getServicePrice(appointment.service);
        const petTypeName = this.getPetTypeName(appointment.petType);

        return `
            <div class="doctor-appointment-item" data-id="${appointment.id}">
                <div class="appointment-main-info">
                    <div class="pet-info">
                        <h4>${appointment.petName}</h4>
                        <span class="pet-type">${petTypeName}</span>
                        <span class="appointment-date">${this.formatDateTime(appointment.date, appointment.time)}</span>
                    </div>
                    <div class="appointment-details">
                        <div class="detail">
                            <strong>–£—Å–ª—É–≥–∞:</strong> ${this.getServiceName(appointment.service)}
                        </div>
                        <div class="detail">
                            <strong>–í–ª–∞–¥–µ–ª–µ—Ü:</strong> ${appointment.userId}
                        </div>
                        <div class="detail">
                            <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${appointment.userPhone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
                        </div>
                        ${appointment.notes ? `
                            <div class="detail">
                                <strong>–ñ–∞–ª–æ–±—ã:</strong> ${appointment.notes}
                            </div>
                        ` : ''}
                    </div>
                </div>
                <div class="appointment-actions">
                    <div class="price">${servicePrice.toLocaleString()} ‚ÇΩ</div>
                    <button class="btn btn-success complete-appointment-btn" data-id="${appointment.id}">
                        <i class="fas fa-check"></i> –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–µ–º
                    </button>
                </div>
            </div>
        `;
    }

    renderMedicalRecord(record) {
        const healthStatusText = {
            'healthy': '–ó–¥–æ—Ä–æ–≤',
            'sick': '–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–µ—á–µ–Ω–∏–µ', 
            'observation': '–ü–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º'
        }[record.healthStatus] || record.healthStatus;

        const healthStatusClass = {
            'healthy': 'status-healthy',
            'sick': 'status-sick',
            'observation': 'status-observation'
        }[record.healthStatus] || 'status-observation';

        return `
            <div class="medical-record-item">
                <div class="record-header">
                    <h4>${record.petName} (${this.getPetTypeName(record.petType)})</h4>
                    <span class="record-date">${this.formatDate(record.completionDate)}</span>
                </div>
                <div class="record-content">
                    <div class="record-details">
                        <div class="detail">
                            <strong>–î–∏–∞–≥–Ω–æ–∑:</strong> ${record.diagnosis}
                        </div>
                        <div class="detail">
                            <strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</strong> 
                            <span class="status-badge ${healthStatusClass}">${healthStatusText}</span>
                        </div>
                        <div class="detail">
                            <strong>–õ–µ–∫–∞—Ä—Å—Ç–≤–∞:</strong> ${record.medications || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã'}
                        </div>
                        ${record.nextAppointment ? `
                            <div class="detail">
                                <strong>–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–µ–º:</strong> ${this.formatDate(record.nextAppointment)}
                            </div>
                        ` : ''}
                    </div>
                    <div class="doctor-comment">
                        <strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤—Ä–∞—á–∞:</strong>
                        <p>${record.doctorComment}</p>
                    </div>
                </div>
            </div>
        `;
    }

    openCompletionModal(appointmentId) {
        const appointment = window.appointmentsSystem?.getAppointments()?.find(apt => apt.id === appointmentId);
        if (!appointment) return;

        const modalHTML = `
            <div id="completionModal" class="modal">
                <div class="modal-content completion-modal">
                    <button class="close">&times;</button>
                    <h2>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞</h2>
                    
                    <div class="patient-info">
                        <h3>${appointment.petName} (${this.getPetTypeName(appointment.petType)})</h3>
                        <p><strong>–í–ª–∞–¥–µ–ª–µ—Ü:</strong> ${appointment.userId}</p>
                        <p><strong>–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞:</strong> ${this.formatDateTime(appointment.date, appointment.time)}</p>
                        ${appointment.notes ? `<p><strong>–ñ–∞–ª–æ–±—ã:</strong> ${appointment.notes}</p>` : ''}
                    </div>
                    
                    <form id="completionForm">
                        <div class="form-group">
                            <label for="healthStatus">–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ *</label>
                            <select id="healthStatus" required>
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</option>
                                <option value="healthy">–ó–¥–æ—Ä–æ–≤</option>
                                <option value="sick">–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–µ—á–µ–Ω–∏–µ</option>
                                <option value="observation">–ü–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="diagnosis">–î–∏–∞–≥–Ω–æ–∑ *</label>
                            <textarea id="diagnosis" required placeholder="–û–ø–∏—à–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑ –ø–∞—Ü–∏–µ–Ω—Ç–∞..." rows="3"></textarea>
                        </div>
                        
                        <div class="form-group">
                            <label for="medications">–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</label>
                            <textarea id="medications" placeholder="–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –¥–æ–∑–∏—Ä–æ–≤–∫—É –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..." rows="3"></textarea>
                        </div>
                        
                        <div class="form-group">
                            <label for="nextAppointment">–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–µ–º–∞</label>
                            <input type="date" id="nextAppointment" min="${new Date().toISOString().split('T')[0]}">
                        </div>
                        
                        <div class="form-group">
                            <label for="doctorComment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤—Ä–∞—á–∞ *</label>
                            <textarea id="doctorComment" required placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏..." rows="4"></textarea>
                        </div>
                        
                        <div class="form-actions">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–µ–º
                            </button>
                            <button type="button" class="btn btn-outline" id="cancelCompletionBtn">
                                –û—Ç–º–µ–Ω–∞
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        `;

        // Remove existing modal if any
        const existingModal = document.getElementById('completionModal');
        if (existingModal) {
            existingModal.remove();
        }

        document.body.insertAdjacentHTML('beforeend', modalHTML);
        const modal = document.getElementById('completionModal');
        modal.style.display = 'flex';

        this.setupCompletionModalEvents(appointmentId);
    }

    setupCompletionModalEvents(appointmentId) {
        const modal = document.getElementById('completionModal');
        const form = document.getElementById('completionForm');
        const cancelBtn = document.getElementById('cancelCompletionBtn');

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.completeAppointment(appointmentId);
            modal.style.display = 'none';
        });

        cancelBtn.addEventListener('click', () => {
            modal.style.display = 'none';
        });

        modal.querySelector('.close').addEventListener('click', () => {
            modal.style.display = 'none';
        });

        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.style.display = 'none';
            }
        });
    }

    completeAppointment(appointmentId) {
        const form = document.getElementById('completionForm');
        const formData = {
            healthStatus: document.getElementById('healthStatus').value,
            diagnosis: document.getElementById('diagnosis').value,
            medications: document.getElementById('medications').value,
            nextAppointment: document.getElementById('nextAppointment').value,
            doctorComment: document.getElementById('doctorComment').value,
            completionDate: new Date().toISOString(),
            doctorId: window.authSystem.currentUser.doctorId,
            doctorName: window.authSystem.currentUser.name
        };

        // Validate required fields
        if (!formData.healthStatus || !formData.diagnosis || !formData.doctorComment) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–æ—Ç–º–µ—á–µ–Ω—ã *)');
            return;
        }

        // Update appointment status
        const appointments = window.appointmentsSystem?.getAppointments() || [];
        const appointmentIndex = appointments.findIndex(apt => apt.id === appointmentId);
        
        if (appointmentIndex !== -1) {
            appointments[appointmentIndex].status = 'completed';
            localStorage.setItem('vetAppointments', JSON.stringify(appointments));
        }

        // Save medical record
        this.saveMedicalRecord(appointmentId, formData);

        this.showNotification('–ü—Ä–∏–µ–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –±–æ–ª–µ–∑–Ω–µ–π.', 'success');
        
        // Reload doctor content
        setTimeout(() => {
            this.loadDoctorContent();
        }, 500);
    }

    saveMedicalRecord(appointmentId, recordData) {
        const appointment = window.appointmentsSystem?.getAppointments()?.find(apt => apt.id === appointmentId);
        if (!appointment) return;

        const medicalRecord = {
            id: 'med_' + Date.now(),
            appointmentId: appointmentId,
            petName: appointment.petName,
            petType: appointment.petType,
            owner: appointment.userId,
            service: appointment.service,
            completionDate: recordData.completionDate,
            healthStatus: recordData.healthStatus,
            diagnosis: recordData.diagnosis,
            medications: recordData.medications,
            nextAppointment: recordData.nextAppointment,
            doctorComment: recordData.doctorComment,
            doctorId: recordData.doctorId,
            doctorName: recordData.doctorName
        };

        const medicalHistory = JSON.parse(localStorage.getItem('vetMedicalHistory')) || [];
        medicalHistory.unshift(medicalRecord); // Add to beginning
        localStorage.setItem('vetMedicalHistory', JSON.stringify(medicalHistory));
    }

    getMedicalHistory(doctorId) {
        const medicalHistory = JSON.parse(localStorage.getItem('vetMedicalHistory')) || [];
        return medicalHistory.filter(record => record.doctorId === doctorId)
                           .sort((a, b) => new Date(b.completionDate) - new Date(a.completionDate));
    }

    getServicePrice(service) {
        const prices = {
            consultation: 800,
            vaccination: 1200,
            surgery: 4500,
            dentistry: 1500,
            diagnostics: 2000
        };
        return prices[service] || 0;
    }

    getPetTypeName(petType) {
        const types = {
            cat: '–ö–æ—Ç/–ö–æ—à–∫–∞',
            dog: '–°–æ–±–∞–∫–∞',
            bird: '–ü—Ç–∏—Ü–∞',
            rodent: '–ì—Ä—ã–∑—É–Ω',
            other: '–î—Ä—É–≥–æ–µ'
        };
        return types[petType] || petType;
    }

    getServiceName(serviceKey) {
        const services = {
            consultation: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
            vaccination: '–í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è',
            surgery: '–•–∏—Ä—É—Ä–≥–∏—è',
            dentistry: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è',
            diagnostics: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'
        };
        return services[serviceKey] || serviceKey;
    }

    formatDateTime(date, time) {
        const dateObj = new Date(date);
        return `${dateObj.toLocaleDateString('ru-RU')} –≤ ${time}`;
    }

    formatDate(dateString) {
        return new Date(dateString).toLocaleDateString('ru-RU');
    }

    showNotification(message, type) {
        if (window.authSystem) {
            window.authSystem.showNotification(message, type);
        }
    }
}